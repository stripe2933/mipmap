#version 450
#extension GL_EXT_nonuniform_qualifier : require
#extension GL_KHR_shader_subgroup_shuffle : require

layout (set = 0, binding = 0, rgba8) uniform image2D mipImages[];

layout (push_constant) uniform PushConstant {
    uint baseLevel;
    uint remainingMipLevels;
} pc;

layout (local_size_x = 16, local_size_y = 16) in;

shared vec4 sharedData[8];

void main(){
    ivec2 sampleCoordinate = ivec2(gl_WorkGroupSize.xy * gl_WorkGroupID.xy + uvec2(
        (gl_LocalInvocationID.x & 7U) | (gl_LocalInvocationID.y & ~7U),
        ((gl_LocalInvocationID.y << 1U) | (gl_LocalInvocationID.x >> 3U)) & 15U
    ));

    vec4 averageColor
        = imageLoad(mipImages[pc.baseLevel], 2 * sampleCoordinate)
        + imageLoad(mipImages[pc.baseLevel], 2 * sampleCoordinate + ivec2(1, 0))
        + imageLoad(mipImages[pc.baseLevel], 2 * sampleCoordinate + ivec2(0, 1))
        + imageLoad(mipImages[pc.baseLevel], 2 * sampleCoordinate + ivec2(1, 1));
    averageColor /= 4.0;
    imageStore(mipImages[pc.baseLevel + 1U], sampleCoordinate, averageColor);
    if (pc.remainingMipLevels == 1U){
        return;
    }

    averageColor += subgroupShuffleXor(averageColor, 1U /* 0b0001 */);
    averageColor += subgroupShuffleXor(averageColor, 8U /* 0b1000 */);
    averageColor /= 4.f;
    if ((gl_SubgroupInvocationID & 9U /* 0b1001 */) == 9U) {
        imageStore(mipImages[pc.baseLevel + 2U], sampleCoordinate >> 1, averageColor);
    }
    if (pc.remainingMipLevels == 2U){
        return;
    }

    averageColor += subgroupShuffleXor(averageColor, 2U /* 0b00010 */);
    averageColor += subgroupShuffleXor(averageColor, 16U /* 0b10000 */);
    averageColor /= 4.f;

    if ((gl_SubgroupInvocationID & 27U /* 0b11011 */) == 27U) {
        imageStore(mipImages[pc.baseLevel + 3U], sampleCoordinate >> 2, averageColor);
    }
    if (pc.remainingMipLevels == 3U){
        return;
    }

    averageColor += subgroupShuffleXor(averageColor, 4U /* 0b00100 */);
    if (subgroupElect()){
        sharedData[gl_SubgroupID] = averageColor;
    }

    memoryBarrierShared();
    barrier();

    if ((gl_SubgroupID & 1U) == 1U){
        averageColor = sharedData[gl_SubgroupID ^ 1U] + sharedData[gl_SubgroupID];
        averageColor /= 4.f;
        imageStore(mipImages[pc.baseLevel + 4U], sampleCoordinate >> 3, averageColor);
    }
    if (pc.remainingMipLevels == 4U){
        return;
    }

    if (gl_LocalInvocationIndex == 0U){
        averageColor = (sharedData[0] + sharedData[1] + sharedData[2] + sharedData[3] + sharedData[4] + sharedData[5] + sharedData[6] + sharedData[7]) / 16.f;
        imageStore(mipImages[pc.baseLevel + 5U], sampleCoordinate >> 4, averageColor);
    }
}